#!/usr/bin/perl
use strict;
use warnings;
use Storable;
use Data::Dumper;

use Toolkit;
use Glyph;
use Lexicon;
use Dictionary;
use Parser;

my $lex = Lexicon->new();
$lex->load();
$Glyph::lex = $lex;


#my $res = parse ("alpha");
#print "Result is \"$res\"\n";

#my ($res, $value) = parse ("alpha>beta");
#print "Result is \"$res\", value is \"$value\"\n";


#my @thing = parse ("alpha>1:beta>4:gamma>0:delta");

#my ($type, $value, %hash) = parse ("alpha>1:beta>4:gamma>0:delta");
#print "Result is \"$type\", value is \"$value\"\n";
#print Dumper \%hash;

#my $g = new Glyph(parse ("list>stuff:name>joe:height>14:definite"));
#print Dumper $g;

#exit;

#my $strx = "this>is:a:test";
#if ($strx =~ /(\S+?)[>:]/g) {
#	print ">$1\n";
#}



#print Dumper $lex->{index};

#my $gg = Glyph->new("boolean");
#my $result = $lex->isa("boolean","data");
#print "= $result\n";

#print "\n\n";

#exit;

#$lex->add("root");
#$lex->add("alpha", "root");
#$lex->add("beta",  "root", "weird");

#print Dumper $lex;
#print "\n\n";
#print Dumper $lex->list();

#print join ("\n", $lex->list());


my $dict = Dictionary->new($lex);
$dict->add("the",    "definite");
$dict->add("a",		 "indefinite");
$dict->add("boy", 	 "noun");
$dict->add("dropped", "verb");
$dict->add("ball", 	 "noun");
$dict->add("tall", 	 "adjective:height");
$dict->add("big", 	 "adjective:size");
$dict->add("red", 	 "adjective:color");
$dict->add(".", 	 "terminator");

#print Dumper $dict->{list}{red};

#print Dumper $dict->get("red");

#exit;
#print $dict->list();
#print "\n";

my $parser = Parser->new($lex, $dict);
my $input = "the tall boy dropped a red big ball.";
print "INPUT:     $input\n";

my @words = $parser->parse($input);
#print Dumper \@words;
print "PARSED:    @words\n";

print "EXPANDED:  ";
foreach my $g (@words) {print $g->toString(-1) . " ";}
print "\n";

my @words2 = $parser->deparse(@words);
print "DEPARSED:  @words2\n";

print "\n";
#exit;
my $str = "noun>boy:definite:adjective>tall";
my $exp = Glyph->new($str);
print "INPUT:     $str\n";
print "EXPANDED:  " . $exp->toString(-1) . "\n";
#print Dumper $exp;	


print "\n\n";
